{
  // The number of spaces a tab is equal to. This setting is overridden based on the file contents when `editor.detectIndentation` is on.
  "editor.tabSize": 2,
  // Controls the font size in pixels.
  "editor.fontSize": 16,
  // Controls the line height.
  //  - Use 0 to automatically compute the line height from the font size.
  //  - Values between 0 and 8 will be used as a multiplier with the font size.
  //  - Values greater than or equal to 8 will be used as effective values.
  "editor.lineHeight": 0,
  // Controls the font family.
  "editor.fontFamily": "Consolas, 'Courier New', monospace",
  // Controls whether the editor should automatically close brackets after the user adds an opening bracket.
  //  - languageDefined: Use language configurations to determine when to autoclose brackets.
  //  - beforeWhitespace: Autoclose brackets only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingBrackets": "always",
  // Controls whether the editor should remove adjacent closing quotes or brackets when deleting.
  //  - always
  //  - auto: Remove adjacent closing quotes or brackets only if they were automatically inserted.
  //  - never
  "editor.autoClosingDelete": "always",
  // Controls whether the editor should automatically close quotes after the user adds an opening quote.
  //  - always
  //  - languageDefined: Use language configurations to determine when to autoclose quotes.
  //  - beforeWhitespace: Autoclose quotes only when the cursor is to the left of whitespace.
  //  - never
  "editor.autoClosingQuotes": "always",
  // Controls whether bracket pair colorization is enabled or not. Use `workbench.colorCustomizations` to override the bracket highlight colors.
  "editor.bracketPairColorization.enabled": true,
  // Highlight matching brackets.
  "editor.matchBrackets": "always",
  // Controls how the editor should render the current line highlight.
  //  - none
  //  - gutter
  //  - line
  //  - all: Highlights both the gutter and the current line.
  "editor.renderLineHighlight": "all",
  // Remove trailing auto inserted whitespace.
  "editor.trimAutoWhitespace": true,
  // Controls whether to preview the suggestion outcome in the editor.
  "editor.suggest.preview": true,
  // Enables tab completions.
  //  - on: Tab complete will insert the best matching suggestion when pressing tab.
  //  - off: Disable tab completions.
  //  - onlySnippets: Tab complete snippets when their prefix match.
  "editor.tabCompletion": "on",
  // Controls whether the editor should automatically adjust the indentation when users type, paste, move or indent lines.
  "editor.autoIndent": "full",
  // Enables a pop-up that shows parameter documentation and type information as you type.
  "editor.parameterHints.enabled": true,
  // Controls whether the terminal cursor blinks.
  "editor.cursorBlinking": "expand",
  // Render vertical rulers after a certain number of monospace characters. Use multiple values for multiple rulers. No rulers are drawn if array is empty.
  "editor.rulers": [120],
  "editor.guides.bracketPairs": false,
  // Controls whether the editor should automatically format the pasted content. A formatter must be available and the formatter should be able to format a range in a document.
  "editor.formatOnPaste": true,
  // Format a file on save. A formatter must be available, the file must not be saved after delay, and the editor must not be shutting down.
  "editor.formatOnSave": true,
  // Code action kinds to be run on save.
  "editor.codeActionsOnSave": {
    "source.fixAll": true,
    "source.fixAll.eslint": true
  },
  /* Editor settings end */
  "eslint.codeActionsOnSave.rules": null,
}
